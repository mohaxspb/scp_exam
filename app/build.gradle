apply plugin: 'com.android.application'

//kotlin
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
//new crash reporting
apply plugin: 'io.fabric'

//here is script to generate version code from version name
//which is set in gradle.properties as value of version var
//which must be in format major, minor, patch, where patch goes from 0 to 99
apply from: '../versioning.gradle'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.scp.scpexam"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode buildVersionCode()
        versionName version
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [toothpick_registry_package_name: 'com.scp.scpexam']
            }
        }

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfigs {
                release {
                    // Load keystore
                    if (rootProject.file('keystore.properties').exists()) {
                        def keystorePropertiesFile = rootProject.file("keystore.properties")
                        def keystoreProperties = new Properties()
                        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                        storeFile file(keystoreProperties['storeFile'])
                        storePassword keystoreProperties['storePassword']
                        keyAlias keystoreProperties['keyAlias']
                        keyPassword keystoreProperties['keyPassword']
                    }
                }
            }

            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable true

            //test adUnit IDs from https://developers.google.com/admob/android/test-ads#enable_test_devices
            resValue('string', 'ad_unit_id_interstitial', '24534e1901884e398f1253216226017e')
            resValue('string', 'ad_unit_id_banner', 'b195f8dd8ded45fe847ad89ed1d016da')
            resValue('string', 'ad_unit_id_rewarded_video', '920b6145fb1546cf8b5cf2ac34638bb7')
        }
    }

    flavorDimensions "mode"

    productFlavors {
        prod {
            manifestPlaceholders = [myDebuggable: false]
            buildConfigField "boolean", "TIMBER_ENABLE", "false"
            dimension "mode"
        }
        dev {
            dimension "mode"
            manifestPlaceholders = [myDebuggable: true]
            aaptOptions.cruncherEnabled = false
            resConfigs("ru", "xxhdpi")
        }
        localUra { dimension "mode" }
        localHome { dimension "mode" }

        applicationVariants.all { variant ->
            println("variantCore: " + variant.productFlavors[0].name)

            if (rootProject.file("config/" + variant.productFlavors[0].name + "/config.properties").exists()) {
                def properties = new Properties()
                properties.load(new FileInputStream(rootProject.file("config/" + variant.productFlavors[0].name + "/config.properties")))

                //analitics
                buildConfigField('String', 'YANDEX_METRICA_API_KEY', '"' + properties.get("yandexMetricaApiKey") + '"')
                //analitics END

                //ads
                //mopub
                resValue('string', 'ad_unit_id_banner', properties.get("mopubBanner"))
                resValue('string', 'ad_unit_id_interstitial', properties.get("mopubInterstitial"))
                resValue('string', 'ad_unit_id_rewarded_video', properties.get("mopubRewardedVideo"))

                //quiz api
                buildConfigField('String', 'QUIZ_API_URL', '"' + properties.get("quizApiUrl") + '"')
                //quiz api auth
                buildConfigField('String', 'USER', '"' + properties.get("user") + '"')
                buildConfigField('String', 'PASSWORD', '"' + properties.get("password") + '"')
                //google server_client_id
                buildConfigField('String', 'SERVER_GOOGLE_CLIENT_ID', '"' + properties.get("serverGoogleClientId") + '"')

                buildConfigField('String', 'CLIENT_ID', '"' + properties.get("clientId") + '"')
                buildConfigField('String', 'CLIENT_SECRET', '"' + properties.get("clientSecret") + '"')
                //quiz api ssl pinning
                buildConfigField('String', 'SSL_PINNING_DOMAIN', '"' + properties.get("sslPinningDomain") + '"')
                buildConfigField('String', 'SSL_PINNING_VALUE', '"' + properties.get("sslPinningValue") + '"')

            } else {
                throw new GradleException(
                        "You need to have projectRoot/config/config.properties file with "
                                + "yandexMetricaApiKey, "
                                + "mopubInterstitial, "
                                + "mopubBanner, "
                                + "to build project"
                )
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //support
    String supportLibraryVersion = '1.1.0'
    implementation "androidx.appcompat:appcompat:$supportLibraryVersion"
    implementation "androidx.recyclerview:recyclerview:$supportLibraryVersion"
    implementation "com.google.android.material:material:$supportLibraryVersion"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.preference:preference-ktx:$supportLibraryVersion"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //multidex to support more than 65K methods
    implementation 'androidx.multidex:multidex:2.0.1'

    //google libs
    implementation 'com.google.firebase:firebase-core:17.2.2'
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    implementation 'com.google.firebase:firebase-messaging:20.1.0'
    implementation 'com.google.android.gms:play-services-base:17.1.0'

    // AppMetrica
    implementation 'com.yandex.android:mobmetricalib:3.6.4'

    //new crash reporting
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }

    //DI
    String toothPickVersion = '3.1.0'
    implementation "com.github.stephanenicolas.toothpick:toothpick-runtime:$toothPickVersion"
    implementation "com.github.stephanenicolas.toothpick:smoothie:$toothPickVersion"
    kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:$toothPickVersion"

    //mvp
    //moxy
    String moxyVersion = '2.0.2'
    kapt "com.github.moxy-community:moxy-compiler:$moxyVersion"
    implementation "com.github.moxy-community:moxy-androidx:$moxyVersion"
    implementation "com.github.moxy-community:moxy-ktx:$moxyVersion"

    //routing
    implementation 'ru.terrakok.cicerone:cicerone:5.1.0'

    //rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.18'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.1.1'

    //db
    def roomVersion = '2.2.5'
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"

    // Retrofit
    def okHttpVersion = '4.4.0'
    def retrofitVersion = '2.7.2'
    implementation("com.squareup.retrofit2:retrofit:$retrofitVersion") { exclude module: 'okhttp' }
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    //json
    def moshiVersion = "1.6.0"
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    implementation "com.squareup.moshi:moshi-adapters:$moshiVersion"
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    //adapter delegate
    implementation 'com.hannesdorfmann:adapterdelegates3:3.1.0'

    //logs
    implementation 'com.jakewharton.timber:timber:4.7.1'

    //image
    implementation 'com.github.bumptech.glide:glide:4.10.0'
    kapt 'com.github.bumptech.glide:compiler:4.10.0'

    //dialog
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    //views
    implementation 'com.google.android:flexbox:1.0.0'
    implementation 'jp.wasabeef:blurry:2.1.1'

    //inapp
    implementation 'com.android.billingclient:billing:1.2'

    //rate app
//    implementation('com.scp.scpexam.utils:rate:1.2.1@aar') { transitive = true }
    implementation('ru.kuchanov.utils:rate:1.2.1@aar') { transitive = true }
    //social auth
    //google
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    //facebook
    implementation 'com.facebook.android:facebook-login:5.1.1'
    //vk
    implementation 'com.vk:androidsdk:1.6.9'

    //testing
    testImplementation 'junit:junit:4.12'
    testImplementation('androidx.test.ext:junit:1.1.1')
    testImplementation('androidx.test:rules:1.2.0')

    //flags
    implementation 'com.github.KaKaVip:Android-Flag-Kit:v0.1'

    //mopub
    implementation('com.mopub:mopub-sdk:+@aar') { transitive = true }
}
//google
apply plugin: 'com.google.gms.google-services'