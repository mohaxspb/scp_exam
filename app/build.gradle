apply plugin: 'com.android.application'

//kotlin
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//new crash reporting
apply plugin: 'io.fabric'

//here is script to generate version code from version name
//which is set in gradle.properties as value of version var
//which must be in format major, minor, patch, where patch goes from 0 to 99
apply from: '../versioning.gradle'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "ru.kuchanov.scpquiz"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode buildVersionCode()
        versionName version
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [toothpick_registry_package_name: 'ru.kuchanov.scpquiz']
            }
        }

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfigs {
                release {
                    // Load keystore
                    if (rootProject.file('keystore.properties').exists()) {
                        def keystorePropertiesFile = rootProject.file("keystore.properties")
                        def keystoreProperties = new Properties()
                        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                        storeFile file(keystoreProperties['storeFile'])
                        storePassword keystoreProperties['storePassword']
                        keyAlias keystoreProperties['keyAlias']
                        keyPassword keystoreProperties['keyPassword']
                    }
                }
            }

            if (rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable true

            //test adUnit IDs from https://developers.google.com/admob/android/test-ads#enable_test_devices
            resValue('string', 'ad_unit_id_interstitial', 'ca-app-pub-3940256099942544/1033173712')
            resValue('string', 'ad_unit_id_game_screen_banner', 'ca-app-pub-3940256099942544/6300978111')
        }
    }

    flavorDimensions "mode"

    productFlavors {
        prod {
            manifestPlaceholders = [myDebuggable: false]
            buildConfigField "boolean", "TIMBER_ENABLE", "false"
            dimension "mode"
        }
        dev {
            dimension "mode"
            manifestPlaceholders = [myDebuggable: true]
            aaptOptions.cruncherEnabled = false
            resConfigs("ru", "xxhdpi")
        }
        localUra { dimension "mode" }
        localHome { dimension "mode" }

        applicationVariants.all { variant ->
            println("variantCore: " + variant.productFlavors[0].name)

            if (rootProject.file("config/" + variant.productFlavors[0].name + "/config.properties").exists()) {
                def properties = new Properties()
                properties.load(new FileInputStream(rootProject.file("config/" + variant.productFlavors[0].name + "/config.properties")))

                //analitics
                buildConfigField('String', 'YANDEX_METRICA_API_KEY', '"' + properties.get("yandexMetricaApiKey") + '"')
                //analitics END

                //ads
                //admob
                resValue('string', 'ads_app_id', properties.get("adMobAppId"))
                resValue('string', 'ad_unit_id_interstitial', properties.get("adsBannerIdInterstitial"))
                resValue('string', 'ad_unit_id_game_screen_banner', properties.get("adsBannerIdGameScreen"))

                //appodeal
                resValue('string', 'appodeal_app_key', properties.get("appodealAppKey"))
                //ads END
                //vps api
                buildConfigField('String', 'VPS_API_URL', '"' + properties.get("vpsApiUrl") + '"')
                //quiz api
                buildConfigField('String', 'QUIZ_API_URL', '"' + properties.get("quizApiUrl") + '"')
                //quiz api auth
                buildConfigField('String', 'USER', '"' + properties.get("user") + '"')
                buildConfigField('String', 'PASSWORD', '"' + properties.get("password") + '"')
                //google server_client_id
                buildConfigField('String', 'SERVER_GOOGLE_CLIENT_ID','"' + properties.get("serverGoogleClientId") + '"')

                buildConfigField('String', 'CLIENT_ID', '"' + properties.get("clientId") + '"')
                buildConfigField('String', 'CLIENT_SECRET', '"' + properties.get("clientSecret") + '"')
                //quiz api ssl pinning
                buildConfigField('String', 'SSL_PINNING_DOMAIN', '"' + properties.get("sslPinningDomain") + '"')
                buildConfigField('String', 'SSL_PINNING_VALUE', '"' + properties.get("sslPinningValue") + '"')

            } else {
                throw new GradleException(
                        "You need to have projectRoot/config/config.properties file with "
                                + "yandexMetricaApiKey,"
                                + "adMobAppId,"
                                + "adsBannerIdInterstitial,"
                                + "adsBannerIdGameScreen,"
                                + "appodealAppKey,"
                                + "vpsApiUrl,"
                                + " to build project"
                )
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //support
    String supportLibraryVersion = '28.0.0'
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$supportLibraryVersion"
    //attempt to remove warning
    implementation "com.android.support:customtabs:$supportLibraryVersion"
    implementation "com.android.support:animated-vector-drawable:$supportLibraryVersion"
    implementation "com.android.support:support-media-compat:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    //multidex to support more than 65K methods
    api 'com.android.support:multidex:1.0.3'

    //google libs
    implementation 'com.google.firebase:firebase-core:16.0.6'
    implementation 'com.google.firebase:firebase-analytics:16.0.6'
    implementation 'com.google.firebase:firebase-ads:17.1.2'
    implementation 'com.google.firebase:firebase-messaging:17.3.4'

    // AppMetrica
    //we add it here and delete jar from appodeal
    implementation 'com.yandex.android:mobmetricalib:3.2.2'

    //need for appodeal
    implementation 'com.google.android.gms:play-services-location:16.0.0'
    implementation 'com.google.android.gms:play-services-ads:17.1.2'

    //fix evernote crash
    implementation 'com.google.android.gms:play-services-gcm:16.0.0'
    //appodeal END

    //new crash reporting
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.6@aar') {
        transitive = true
    }

    //DI
    String toothPickVersion = '1.1.3'
    implementation "com.github.stephanenicolas.toothpick:toothpick-runtime:$toothPickVersion"
    implementation "com.github.stephanenicolas.toothpick:smoothie:$toothPickVersion"
    kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:$toothPickVersion"

    //mvp
    String moxyVersion = '1.5.3'
    implementation "com.arello-mobile:moxy:$moxyVersion"
    kapt "com.arello-mobile:moxy-compiler:$moxyVersion"
    implementation "com.arello-mobile:moxy-app-compat:$moxyVersion"

    //routing
    implementation 'ru.terrakok.cicerone:cicerone:3.0.0'

    //rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.5'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    //db
    def roomVersion = "1.1.1"
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"

    // Retrofit
    implementation('com.squareup.retrofit2:retrofit:2.3.0') { exclude module: 'okhttp' }
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'

    //json
    def moshiVersion = "1.6.0"
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    implementation "com.squareup.moshi:moshi-adapters:$moshiVersion"
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    //adapter delegate
    implementation 'com.hannesdorfmann:adapterdelegates3:3.1.0'

    //logs
    implementation 'com.jakewharton.timber:timber:4.7.1'

    //image
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'

    //dialog
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    //views
    implementation 'com.google.android:flexbox:1.0.0'
    implementation 'jp.wasabeef:blurry:2.1.1'

    // Optional. Play Install Referrer library for better attribution.
    implementation 'com.android.installreferrer:installreferrer:1.0'

    //inapp
    implementation 'com.android.billingclient:billing:1.2'

    //rate app
    implementation('ru.kuchanov.utils:rate:1.2.1@aar') { transitive = true }

    //social auth
    //google
    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    //facebook
    implementation 'com.facebook.android:facebook-login:4.38.1'
    //vk
    implementation 'com.vk:androidsdk:1.6.9'

    //testing
    testImplementation 'junit:junit:4.12'
    testImplementation('com.android.support.test:runner:1.0.2')
    testImplementation('com.android.support.test:rules:1.0.2')
}
//google
apply plugin: 'com.google.gms.google-services'